// Generated by sqlboiler-erg: DO NOT EDIT.
package {{ergPkgName}}

import (
{{ range $v := .Imports }}
    "{{ . }}"
{{- end }}
)

type {{ .Name.PascalCase }} struct {
    {{ if isInline }}
    *{{sqlboilerPkgName}}.{{ .Name.PascalCase }}
    {{- else}}
    {{- range $column := .Columns }}
            {{ .Name.PascalCase }} {{ if eq .Type.GoTypeName "bool" }}*{{ end}}{{ .Type.GoTypeName }} `boil:"{{ .Name.SnakeCase }}" json:"{{.Name.SnakeCase}},omitempty" toml:"{{ .Name.SnakeCase }}" yaml:"{{  .Name.SnakeCase }}"`
    {{- end }}
    {{- end }}


    {{ range $relation := .Relations }}
        {{ .Name.PascalCase }} {{ .Type.GoTypeName }} `boil:"{{ .Name.SnakeCase }}" json:"{{ .Name.SnakeCase }},omitempty" toml:"{{ .Name.SnakeCase }}" yaml:"{{ .Name.SnakeCase }}"`
    {{- end }}

    CustomFields CustomFields `json:"custom_fields,omitempty"`
}

type {{.Name.PascalCase}}Slice []*{{.Name.PascalCase}}

func To{{pluralize .Name.PascalCase}}(a {{sqlboilerPkgName}}.{{ singularize .Name.PascalCase }}Slice, acf CustomFieldsSlice, exclude ...string) {{ .Name.PascalCase }}Slice {
	if exclude == nil {
		exclude = []string{}
	}

	s := make({{ .Name.PascalCase }}Slice, len(a))
	for i, d := range a {
        var cf CustomFields
        if acf != nil {
            if value, ok := acf[d.ID]; ok {
                cf = value
            }
        }

		s[i] = To{{singularize .Name.PascalCase}}(d, cf, exclude...)
	}
	return s
}

func To{{singularize .Name.PascalCase }}(a *{{sqlboilerPkgName}}.{{singularize .Name.PascalCase }}, customFields CustomFields, exclude ...string) *{{ .Name.PascalCase }} {
    if exclude == nil {
        exclude = []string{}
    }
    
    p := {{ .Name.PascalCase }}{
        {{ if isInline}}
        {{.Name.PascalCase}}: a,
        {{- else}}
        {{- range $column := .Columns }}
        {{- if .Type.IsNullable }}
            {{- if eq .Type.GoType "null.Time" }}
                {{ .Name.PascalCase }}: ConvertNullTime(a.{{ .Name.PascalCase }}),
            {{- else}}
                {{ .Name.PascalCase }}: null{{ convertToNullFuncType .Type.GoTypeName }}(a.{{ .Name.PascalCase }}),
            {{- end}}
        {{- else }}
            {{ .Name.PascalCase }}: {{ convertToFuncType .Type "a." .Name.PascalCase }},
        {{- end}}
        {{- end}}
        {{- end}}
    }

    {{ $snakeCaseName := .Name.SnakeCase }}
    if a.R != nil {
        {{- range $relation := .Relations }}
            if a.R.{{ .Name.PascalCase }} != nil && doesNotContain(exclude,"{{ $snakeCaseName}}.{{ singularize .MainTableName.SnakeCase }}") {
                p.{{ .Name.PascalCase }} = To{{if .IsMany }}{{ pluralize .MainTableName.PascalCase }}{{- else}}{{singularize .MainTableName.PascalCase }}{{- end}}(a.R.{{ .Name.PascalCase }}, nil, append(exclude, "{{ singularize .MainTableName.SnakeCase}}.{{ $snakeCaseName }}")...)
            }
        {{- end }}
    }
    
    if customFields != nil {
        p.CustomFields = customFields
    }

    return &p
}